name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.19
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run tests
        env:
          BUN_NO_TRANSPILE_CACHE: "1"
        run: |
          echo "üß™ Running test suite..."
          bun test
          
          # Check if tests passed (bun test exits with 0 on success)
          if [ $? -eq 0 ]; then
            echo "‚úÖ All tests passed successfully!"
          else
            echo "‚ùå Tests failed!"
            exit 1
          fi

  build-and-validate:
    name: Build and Validate Size
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.19
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build project
        run: bun run build
        
      - name: Check build output exists
        run: |
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Build output not found at dist/index.js"
            exit 1
          fi
          echo "‚úÖ Build output found at dist/index.js"
          
      - name: Validate build size
        run: |
          # Get file size in bytes (compatible with both Linux and macOS)
          SIZE=$(stat -c%s "dist/index.js" 2>/dev/null || stat -f%z "dist/index.js")
          SIZE_MB=$(echo "scale=2; $SIZE / 1024 / 1024" | bc)
          SIZE_KB=$(echo "scale=2; $SIZE / 1024" | bc)
          
          # 1MB = 1048576 bytes
          MAX_SIZE=1048576
          
          echo "üì¶ Build Information:"
          echo "  File: dist/index.js"
          echo "  Size: $SIZE bytes"
          echo "  Size: ${SIZE_KB} KB"
          echo "  Size: ${SIZE_MB} MB"
          echo "  Limit: 1.00 MB (${MAX_SIZE} bytes)"
          echo ""
          
          if [ $SIZE -gt $MAX_SIZE ]; then
            echo "‚ùå Build size exceeds 1MB limit!"
            echo "   Current: ${SIZE_MB} MB"
            echo "   Limit:   1.00 MB"
            echo "   Excess:  $(echo "scale=2; $SIZE_MB - 1" | bc) MB"
            echo ""
            echo "üí° Tips to reduce bundle size:"
            echo "   - Remove unused dependencies"
            echo "   - Use tree-shaking"
            echo "   - Optimize imports"
            echo "   - Consider code splitting"
            exit 1
          else
            REMAINING=$(echo "scale=2; 1 - $SIZE_MB" | bc)
            echo "‚úÖ Build size is within limits!"
            echo "   Current: ${SIZE_MB} MB"
            echo "   Limit:   1.00 MB"
            echo "   Remaining: ${REMAINING} MB"
          fi
          